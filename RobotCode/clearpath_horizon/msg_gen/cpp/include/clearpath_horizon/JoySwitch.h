/* Auto-generated by genmsg_cpp for file /home/parth/Code/ME597/RobotCode/clearpath_horizon/msg/JoySwitch.msg */
#ifndef CLEARPATH_HORIZON_MESSAGE_JOYSWITCH_H
#define CLEARPATH_HORIZON_MESSAGE_JOYSWITCH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace clearpath_horizon
{
template <class ContainerAllocator>
struct JoySwitch_ {
  typedef JoySwitch_<ContainerAllocator> Type;

  JoySwitch_()
  : robot_id()
  , attach(0)
  , joystick()
  {
  }

  JoySwitch_(const ContainerAllocator& _alloc)
  : robot_id(_alloc)
  , attach(0)
  , joystick(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  robot_id;

  typedef uint8_t _attach_type;
  uint8_t attach;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joystick_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joystick;


  typedef boost::shared_ptr< ::clearpath_horizon::JoySwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clearpath_horizon::JoySwitch_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JoySwitch
typedef  ::clearpath_horizon::JoySwitch_<std::allocator<void> > JoySwitch;

typedef boost::shared_ptr< ::clearpath_horizon::JoySwitch> JoySwitchPtr;
typedef boost::shared_ptr< ::clearpath_horizon::JoySwitch const> JoySwitchConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::clearpath_horizon::JoySwitch_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::clearpath_horizon::JoySwitch_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace clearpath_horizon

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::clearpath_horizon::JoySwitch_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::clearpath_horizon::JoySwitch_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::clearpath_horizon::JoySwitch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0b9e4d12a122fa671dc7b4bd8741705d";
  }

  static const char* value(const  ::clearpath_horizon::JoySwitch_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0b9e4d12a122fa67ULL;
  static const uint64_t static_value2 = 0x1dc7b4bd8741705dULL;
};

template<class ContainerAllocator>
struct DataType< ::clearpath_horizon::JoySwitch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "clearpath_horizon/JoySwitch";
  }

  static const char* value(const  ::clearpath_horizon::JoySwitch_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::clearpath_horizon::JoySwitch_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string robot_id\n\
uint8 attach\n\
string joystick\n\
\n\
";
  }

  static const char* value(const  ::clearpath_horizon::JoySwitch_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::clearpath_horizon::JoySwitch_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_id);
    stream.next(m.attach);
    stream.next(m.joystick);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JoySwitch_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clearpath_horizon::JoySwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::clearpath_horizon::JoySwitch_<ContainerAllocator> & v) 
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_id);
    s << indent << "attach: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.attach);
    s << indent << "joystick: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joystick);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CLEARPATH_HORIZON_MESSAGE_JOYSWITCH_H

